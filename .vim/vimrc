""" """ Vundle settings """ """

"""To install plugins from scratch on new machine after cloning my repo:
" From vim :     In normal mode, run :PluginInstall
" From shell :   vim +PluginInstall +qall
"""To update plugins:
" From vim :     :PluginUpdate
" From shell :   vim -c VundleUpdate -c quitall
" To update on shell quietly:
" $ vim -i NONE -c VundleUpdate -c quitall > /dev/null 2>&1

"""Required settings for Vundle
set nocompatible " Suck it, Vi!
filetype off

"""Set Vundle location and initialize it
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
"alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

"""Vundle must manage Vundle. Do not change!
Plugin 'VundleVim/Vundle.vim'

"""___ MY PLUGINS HERE ___"""

"Purdy colors
Plugin 'blockloop/vim-codeschool'
Plugin 'midnight.vim'
Plugin 'midnight2.vim'
Plugin 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
Plugin 'flazz/vim-colorschemes'
Plugin 'altercation/vim-colors-solarized'

"Syntax
Plugin 'fountain.vim'
Plugin 'shawncplus/phpcomplete.vim'
Plugin 'StanAngeloff/php.vim'
Plugin 'scrooloose/syntastic'

"Python specifically
Plugin 'tmhedberg/SimpylFold'
Plugin 'vim-scripts/indentpython.vim'
Plugin 'nvie/vim-flake8'
autocmd BufRead,BufNewFile *.py,*.pyw let python_highlight_all=1

"Java specific
Plugin 'mikelue/vim-maven-plugin'
Plugin 'JalaiAmitahl/maven-compiler.vim'
Plugin 'cilquirm/javacomplete'
autocmd Filetype java compiler mvn
autocmd Filetype pom compiler mvn
function SetJavaOpts()
    setfiletype java
    "match these characters with %
    setlocal matchpairs=(:),{:},[:],<:>

    "eclipse style add a * comments
    setlocal comments-=s1:/*,mb:*,ex:*/
    setlocal comments+=fb:*

    "completion options
    setlocal cscopequickfix=s-,c-,d-,i-,t-,e-
    setlocal completeopt=longest,menuone
    setlocal completefunc=javacomplete#Complete
    "export java classpath as completion locations for javacomplete
    for i in split($CLASSPATH,":")|call javacomplete#AddClassPath(i)|endfor
endfunction
autocmd BufNewFile,Bufread *.java call SetJavaOpts()

" General master linter
Plugin 'w0rp/ale'

"Cool shit
Plugin 'sjl/gundo.vim'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-session'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'kien/ctrlp.vim'
Plugin 'RltvNmbr.vim'
Plugin 'ervandew/supertab'
Plugin 'ConradIrwin/vim-bracketed-paste'
Plugin 'romainl/vim-cool'
Plugin 'tpope/vim-fugitive'
Plugin 'matze/vim-move'
Plugin 'tpope/vim-surround'

""Latex
Plugin 'lervag/vimtex'

""Sometimes works sometimes doesn't
Plugin 'tpope/vim-sensible'
"Plugin 'Valloric/YouCompleteMe' " Make sure to edit runme if you take this out

""Currently not in use
"Plugin 'Yggdroot/indentLine'

"""___ END MY PLUGINS ___"""

"""More info on Vundle Plugins:
" https://github.com/VundleVim/Vundle.vim/blob/v0.10.2/doc/vundle.txt#L72-L113

call vundle#end()
filetype plugin indent on
"filetype plugin on

""" """ End Vundle settings """ """


"""Load powerline
let g:powerline_pycmd = 'py3'
python3 from powerline.vim import setup as powerline_setup
python3 powerline_setup()
python3 del powerline_setup

""" Don't save or load sessions unless I tell you to
let g:session_autosave = 'no'
let g:session_autoload = 'no'
let g:session_directory = '~/.vim-sessions'

"""Holy shit this no last character thing is getting old fast
set virtualedit=onemore

"""Get cutting and pasting working
set clipboard=unnamed
vmap <C-c> "+y
nmap <C-v> "+pA
imap <C-v> <Esc>"+pA

"""utf-8 encoding is BEST ENCODING!!!
set encoding=utf-8

"""There are no carraige returns!
set fileformat=unix

"Either of these will cause carraige return (\r) line endings to display as ^M
"e ++ff=unix   "Set this while in the file as a :colon command
"set binary    "Set this here in the vimrc
"""Set one of these and enable the eol white space below to see full \r\n line endings

"""Turn on mouse, even though we shouldn't use it.
set mouse=a
set ttymouse=xterm2

"""Timeout for key presses
set ttimeout
set ttimeoutlen=100

"""Keep buffers
set hidden

"""Attempt to get indents correct
set autoindent
set complete-=i
set smarttab
let g:indentLine_enabled = 1
let g:indentLine_char = '┆'
let g:indentLine_leadingSpaceChar = '·'
let g:indentLine_leadingSpaceEnabled = 1

"""Show some whitespace
set listchars=tab:»·,trail:·,nbsp:·,extends:»,precedes:«
"set listchars+=space:·,eol:¬
"set listchars+=space:·
set list

"""Tabs are motherfucking 4 spaces damnit!!!
set tabstop=4
set softtabstop=4
set expandtab
set shiftwidth=4
"set nosmarttab

"""Misc other vim-sensible things
if v:version > 703 || v:version == 703 && has("patch541")
    set formatoptions+=j " Delete comment character when joining commented lines
endif
if has('path_extra')
    setglobal tags-=./tags tags-=./tags; tags^=./tags;
endif
if &shell =~# 'fish$' && (v:version < 704 || v:version == 704 && !has('patch276'))
    set shell=/bin/bash
endif
if !empty(&viminfo)
    set viminfo^=!
endif
set sessionoptions-=options
" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^linux\|^Eterm'
    set t_Co=16
endif
" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
    runtime! macros/matchit.vim
endif

"""Show line numbers, both absolute and relative
set relativenumber
"call RltvNmbr#RltvNmbrCtrl(1)
"""Plugin takes up way too much processing power, so just using built-in
set number

"""Now make insert mode show absolute numbering only
autocmd InsertEnter * set relativenumber!
autocmd InsertLeave * set relativenumber

"""Caps lock mapped to Esc while in Vim
"autocmd VimEnter * silent !xmodmap -e 'clear Lock' -e 'keycode 0x42 = Escape'
"autocmd VimLeave * silent !xmodmap -e 'clear Lock' -e 'keycode 0x42 = Caps_Lock'
"""Nevermind, I just set that globally on my system all the time.

"""Nevermind, that 0.5 second pause every time I run it is going to be annoying,
"""so just map Esc to qq. After all, how often do you type qq?
"imap qq <Esc>
"map qq <Esc>
"""Turns out, never! This qq command is actually working out brillitantly!
"""Actually, with caps lock set, this isn't really necessary.
"""On second thought, you know what, I am keeping it.
imap qq <Esc>
map qq <Esc>


"""While we're at it, force ourselves to practice proper vim movement
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
"""Practice, practice, practice!!!
"imap <up> <nop>
"imap <down> <nop>
"imap <left> <nop>
"imap <right> <nop>

"""Leave insert mode after 5 seconds of not editing
function SetInsertOffTimer()
    autocmd InsertEnter * let updaterestore=&updatetime | set updatetime=5000
    autocmd InsertLeave * let &updatetime=updaterestore
    autocmd CursorHoldI * silent! stopinsert
endfunction
autocmd BufNew,BufNewFile,BufAdd,BufCreate,VimEnter * call SetInsertOffTimer()

"""And while we're forcing ourselves to develop good habits, we
"""might as well torture ourselves.
"noremap h <NOP>
"noremap j <NOP>
"noremap k <NOP>
"noremap l <NOP>
"""Nevermind that's too hard, I can't fucking move. Commenting those out
"""took like eight minutes. Disabling the arrow keys is plenty for now.

"""{{{Fold}}}
set foldlevelstart=99
set foldmethod=indent
nmap <space> za

"""Don't create wierd new backup files I never asked for
set nobackup

"""Write backup is cool tho
set writebackup

"""And for the love of God please do keep a swap file in case of a crash
set swapfile

"""Show bottom info bar
set ruler

"""Remember damn near everything
set history=999
set tabpagemax=50

"""Keep me front and center
set scrolloff=999

"""Finish my sentences for me
set showcmd
set wildmode=longest,list,full
set wildmenu

"""Scroll correctly
if !&scrolloff
    set scrolloff=1
endif
if !&sidescrolloff
    set sidescrolloff=5
endif
set display+=lastline

"""Show status
set laststatus=2

"""Remap vim-move movements to ctrl because terminal app captures alt key
let g:move_key_modifier = 'C'
"Ctrl+j and Ctrl+k move lines/selections up/down
"And {num}ctrl+j/k moves them up/down that number of lines

"""Always refresh
set autowrite
set autoread
autocmd FocusGained,BufEnter * :silent! !

"""If not in terminal, use good font
if has('gui_running')
    if has('gui_win32')
        set guifont=DejaVu_Sans_Mono:h10:cANSI
    else
        set guifont=DejaVu\ Sans\ Mono\ 10
    endif
endif

"""Find my homie
set showmatch

"""Don't use unnecessary resources
set lazyredraw

"""Set leader key to comma
let mapleader = ","

"""Improve searching
set gdefault
set ignorecase
"set smartcase
set hlsearch
nmap <silent> <leader>/ :noh<cr>
set incsearch
set showmatch
" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
    nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif

"""Some basic HTML fixes
set matchpairs+=<:>
let g:html_indent_tags = 'li\|p'

"""Some easy standard keys I want to use
set backspace=indent,eol,start
nmap <CR> $a<CR><Esc>
nmap <Del> i<Del>
nmap <BS> i<BS>
nmap <C-BS> dbi<Del><Esc>
imap <C-BS> <Esc>edbi<Del>
nmap <C-S-j> <PageDown>
imap <C-S-j> <PageDown>
nmap <C-S-k> <PageUp>
imap <C-S-k> <PageUp>
nmap <C-f> /
imap <C-f> <Esc>/
nmap <C-a> <nop>
imap <C-a> <nop>
vmap <C-a> <nop>
map <C-a> <nop>

"""Just making sure enter key map above doesn't fuck up things
autocmd CmdwinEnter * nmap <CR> <CR>
autocmd BufReadPost quickfix nmap <CR> <CR>

"""Nerd Tree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
map <C-n> :NERDTreeToggle<CR>

"""Bitch you'll wrap when I fucking tell you to wrap
set linebreak
set textwidth=0
set wrapmargin=0
set formatoptions-=t

"""Like here, yes wrap here. Look like you wrap, but don't actually new line
set wrap

"""God motherfucking damnit, I SAID YOU'LL WRAP WHEN I FUCKING TELL YOU TO WRAP
function DisableAutoLineBreak()
    set wrap
    set linebreak
    set textwidth=0
    set wrapmargin=0
    set formatoptions-=t
endfunction
autocmd BufNew,BufNewFile,BufAdd,BufCreate,VimEnter * call DisableAutoLineBreak()

"""Sssssave and QQQQQQuit 
nmap sss :w<CR>
nmap qqq :wq<CR>
imap sss <Esc>:w<CR>i
imap qqq <Esc>:wq<CR>

"""Ctrl save and ctrl quit
"nmap <C-s> :w<CR>
"nmap <C-q> :w<CR>
"imap <C-s> <Esc>:w<CR>i
"imap <C-q> <Esc>:wq<CR>
"""Nevermind, terminal app doesn't let me hook those


" ALE Setting
let g:ale_open_list = 'on_save'             " show quickfix or locallist window
let g:ale_list_window_size = 5
let g:ale_set_loclist = 0                   " not use locallist show repeat reuslt
let g:ale_set_quickfix = 1                  " for different lint.
let g:ale_lint_delay = 500                  " lint after 500 ms.
let g:ale_lint_on_text_changed = 'normal'   " 'always' kind of annoy
let g:ale_lint_on_insert_leave = 1
let g:airline#extentions#ale#enabled = 0
let g:ale_linters = {
            \ 'python': ['pycodestyle'],
            \ 'cpp' : ['gcc','clang']
            \       }
" ALE C++ confiure
let g:ale_cpp_clang_options = '-std=c++11 -Wall'
let g:ale_cpp_gcc_executable = 'g++'
let g:ale_cpp_gcc_options = '-std=c++11 -Wall'
let g:ale_cpp_cppcheck_options = ''


"""Turn on dem pretty colors
set background=dark
colorscheme mydefault

"""Clean code should rarely exceed 80 chars per line
"""But don't wrap for me, just alert me to where it is
"let &colorcolumn=join(range(80,2000),",")
let &colorcolumn=80
highlight ColorColumn ctermbg=237
"highlight OverLength ctermfg=red
"match OverLength /\%>79v.\+/

"""Highlight current line
set cursorline
highlight CursorLine cterm=none ctermbg=237

"""Use highlight to tell me when I'm in insert mode
autocmd InsertEnter * highlight CursorLine cterm=none ctermbg=59
autocmd InsertLeave * highlight CursorLine cterm=none ctermbg=237

"""LOL no don't fucking hide shit from me, fuck you
set conceallevel=0
setlocal conceallevel=0
let g:vim_json_syntax_conceal = 0
set cole=0
au FileType * setl cole=0

